from __future__ import annotations
import numpy as np
import networkx as nx
import hourly_usage_and_probability as pr
import size_dictionary as sd
import elevation_matrix as em
import travel_matrix as tm
from typing import Dict, List, Tuple
from request import Request

def build_complete_digraph(travel_time):
    """
    Build a complete digraph whose edge attribute 'time' holds one-way travel
    time in minutes. 
    ----------------
    Parameters:
    travel_time - [i, j] represents the travel time in mins from i to j

    Returns:
    G - complete digraph G populated based on data provided
    """
    n = travel_time.shape[0]
    G = nx.complete_graph(n, create_using=nx.DiGraph)
    for u, v in G.edges:
        G.edges[u, v]["time"] = int(travel_time[u, v])
    return G

def simulation(
        G,
        distribution,
        *,
        day,
        T,
        max_bikes_per_hub=10,
        initial_bikes_per_hub=5,
        rng=None,
):
    """
    Parameters:
    G - K_10 generated from data
    distribution - 24-element np.ndarray hourly rental requests at each hub
    possibilities - 10-element destination probabilities for each hub, [origin][origin] must be 0.0
    keyword args - must be passed with name
        max_bikes_per_hub - 10
        initial_bikes_per_hub - 5 for simplicity 
        rng - NumPy generator for reproducibility

    Returns:
    no_bike_events - 24-element np.ndarray representing the no. of no-bike events every hour in the system
    no_parking_events - 24-element np.ndarray representing the no. of no-space events every hour in the system
    all_requests - list of Request objects tracking all rides and attempts
    """
    
    if rng is None:
        rng = np.random.default_rng()

    num_hubs = G.number_of_nodes()

    req_pool = {}
    all_requests = []
    for hub in range(num_hubs):
        n_req = int(distribution[hub].sum())
        bag = [Request() for _ in range(n_req)]
        req_pool[hub] = bag
        all_requests.extend(bag)
    
    bike_stock = np.full(num_hubs, initial_bikes_per_hub, dtype=int)
    
    in_transit = []

    no_bike_events = np.zeros(T, dtype=int)
    no_parking_events = np.zeros(T, dtype=int)

    for hour in range(T):
        on_road = []
        
        for req in in_transit:
            req.minutes_left -= 60

            if req.minutes_left > 0:
                on_road.append(req)
                continue

            dest = req.dest
            
            if bike_stock[dest] < max_bikes_per_hub:
                bike_stock[dest] += 1
                continue
                
            no_parking_events[hour] += 1

            candidate = None
            for offset in range(1, num_hubs):
                for new_hub in (dest - offset, dest + offset):
                    if 0 <= new_hub < num_hubs:
                        candidate = new_hub
                        break
                if candidate is not None:
                    break
            
            if candidate is None:
                req.minutes_left = 60
                on_road.append(req)
                continue

            extra_time = int(G.edges[dest, candidate]["time"])
            req.dest = candidate
            req.minutes_left = extra_time
            on_road.append(req)
                    
        in_transit = on_road

        for hub in range(num_hubs):
            for _ in range(int(distribution[hub][hour])):
                req = req_pool[hub].pop() if req_pool[hub] else Request()
                all_requests.append(req)
                req.origin = hub

                if bike_stock[hub] == 0:
                    no_bike_events[hour] += 1
                    req.success = False
                    continue

                probs = []
                destinations = [str(i) for i in range(num_hubs)]
                for dest in destinations:
                    p = pr.probability(str(hub), dest,sd.size_dictionary, day, str(hour),beta1=0.04, beta2=0.05, lnSize=0.003,elevation_matrix =em.elevation_matrix,travel_matrix=tm.travel_matrix)
                    probs.append(p)

                probs = np.array(probs)
                probs = probs / probs.sum()
                
                dest = rng.choice(num_hubs, p=probs)
                req.dest = int(dest)

                req.minutes_left = int(G.edges[hub, dest]["time"])
                req.success = True
                in_transit.append(req)

    return no_bike_events, no_parking_events, all_requests
